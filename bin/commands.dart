import 'dart:math';

import 'package:teledart/teledart.dart';
import 'package:teledart/telegram.dart';
import 'package:teledart/model.dart';

import 'config.dart';
import 'global.dart';

void main(List<String> arguments) async {
  // Get settings
  if (!await MzConfig.parseJSON()) {
    print("Failed to get settings.");
    return;
  }

  var telegram = Telegram(MzConfig.botId);
  var event = Event((await telegram.getMe()).username!);
  var teledart = TeleDart(telegram, event);

  teledart.start();

  teledart
      .onMessage(entityType: 'bot_command', keyword: 'start')
      .listen((message) {
    if (message.chat.id == MzConfig.testersChat ||
        message.chat.id == MzConfig.basicChat) {
      teledart.telegram.sendMessage(message.chat.id, '–Ø –º–æ–≥—É —Ç–æ–ª—å–∫–æ /stop.',
          reply_to_message_id: message.message_id);
    }
  });

  teledart.onMessage(entityType: 'bot_command', keyword: 'q').listen((message) {
    if (message.chat.id == MzConfig.testersChat) {
      teledart.telegram.sendMessage(message.chat.id,
          '–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç QuotLy! –æ–π –Ω–µ —Ç–æ—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ä–æ—á–µ —Ñ–∏–≥ —Ç–µ–±–µ –∞ –Ω–µ —Å—Ç–∏–∫–µ—Ä, –∫–∞–∫–∞—à–∫–∞ üòù',
          reply_to_message_id: message.message_id);
    }
  });

  teledart
      .onMessage(entityType: 'bot_command', keyword: 'bootloop')
      .listen((message) async {
    if (message.chat.id == MzConfig.testersChat ||
        message.chat.id == MzConfig.basicChat) {
      StickerSet mSucksStickers = await teledart.telegram
          .getStickerSet("ghbtuszdv_1001428227417_by_QuotLyBot");

      teledart.telegram.sendSticker(
          message.chat.id,
          mSucksStickers
              .stickers[message.chat.id != MzConfig.testersChat
                  ? Random().nextInt(mSucksStickers.stickers.length)
                  : 32]
              .file_id,
          reply_to_message_id: message.message_id);
    }
  });

  teledart
      .onMessage(entityType: 'bot_command', keyword: 'stop')
      .listen((message) {
    if (message.chat.id == MzConfig.testersChat ||
        message.chat.id == MzConfig.basicChat) {
      teledart.telegram.sendMessage(message.chat.id, '–Ø –º–æ–≥—É —Ç–æ–ª—å–∫–æ /start.',
          reply_to_message_id: message.message_id);
    }
  });

  teledart
      .onMessage(entityType: 'bot_command', keyword: 'help')
      .listen((message) {
    if (message.chat.id == MzConfig.testersChat ||
        message.chat.id == MzConfig.basicChat) {
      if (message.chat.id != MzConfig.testersChat) {
        teledart.telegram.sendMessage(
            message.chat.id,
            "–£–º–µ—é:\n"
            "/start|/stop: –∫—Ä–∏–Ω–∂ #1\n"
            "/bootloop: –∫—Ä–∏–Ω–∂ #2\n\n"
            "`–ì–æ–≤–Ω–æ–∫–æ–¥ by tdrkDev (c) 2021`",
            reply_to_message_id: message.message_id,
            parse_mode: "Markdown");
        return;
      }

      teledart.telegram.sendMessage(
          message.chat.id,
          "–£–º–µ—é:\n"
          "/start|/stop: –∫—Ä–∏–Ω–∂ #1\n"
          "/bootloop: –∫—Ä–∏–Ω–∂ #2\n"
          "/last\\_build: —Å—Ç–∞—Ç—É—Å, –¥–∞—Ç–∞, —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–±–æ—Ä–∫—É\n\n"
          "`–ì–æ–≤–Ω–æ–∫–æ–¥ by tdrkDev (c) 2021`",
          reply_to_message_id: message.message_id,
          parse_mode: "Markdown");
    }
  });

  teledart
      .onMessage(entityType: 'bot_command', keyword: 'last_build')
      .listen((message) async {
    if (message.chat.id != MzConfig.testersChat &&
        message.chat.id == MzConfig.basicChat) {
      teledart.telegram.sendMessage(
          message.chat.id, '–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –Ω–µ –¥–ª—è —Ç–µ—Å—Ç–µ—Ä–æ–≤.',
          reply_to_message_id: message.message_id);
      return;
    }

    MzBuildInfo info = await readBuildInfo();

    String succeed, date, link, type;

    if (info.succeed == null) {
      succeed = "*–°—Ç–∞—Ç—É—Å*: –∏–¥–µ—Ç —Å–±–æ—Ä–∫–∞";
    } else {
      succeed = "*–°—Ç–∞—Ç—É—Å*: " + (info.succeed! ? "—É—Å–ø–µ—Ö" : "–ø–∏–ø–µ—Ü");
    }

    if (info.type == null) {
      type = "*–¢–∏–ø*: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    } else {
      type = "*–¢–∏–ø*: ${info.type}";
    }

    if (info.date == null) {
      date = "*–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏*: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    } else {
      date = "*–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏*: ${info.date.toString()}";
    }

    if (info.link == null) {
      link = "*–°–∫–∞—á–∞—Ç—å*: —Å—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∞";
    } else {
      link = "*–°–∫–∞—á–∞—Ç—å*: [Sourceforge](${info.link})";
    }

    date = date.replaceAll("_", "\\_");
    type = type.replaceAll("_", "\\_");

    String fullMsg = (date + "\n" + type + "\n" + succeed + "\n" + link);

    teledart.telegram
        .sendMessage(message.chat.id, fullMsg, parse_mode: "Markdown");
  });
}
